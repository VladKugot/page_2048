{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.board = initialState || Array.from({\n            length: 4\n        }, function() {\n            return Array(4).fill(0);\n        });\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"updateBoard\",\n            value: function updateBoard() {\n                var table = document.getElementById(\"game-board\").querySelector(\"tbody\");\n                table.innerHTML = \"\";\n                for(var row = 0; row < this.size; row++){\n                    var tr = document.createElement(\"tr\");\n                    for(var col = 0; col < this.size; col++){\n                        var value = this.board[row][col];\n                        var td = document.createElement(\"td\");\n                        td.classList.add(\"field-cell\");\n                        if (value) {\n                            td.classList.add(\"field-cell--\".concat(value));\n                            td.textContent = value;\n                        } else td.textContent = \"\";\n                        tr.appendChild(td);\n                    }\n                    table.appendChild(tr);\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var moved = false;\n                for(var row = 0; row < this.size; row++){\n                    var newRow = [];\n                    for(var col = 0; col < this.size; col++){\n                        var value = this.board[row][col];\n                        if (value !== 0) newRow.push(value);\n                    }\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        this.score += newRow[i];\n                        newRow.splice(i + 1, 1);\n                    }\n                    while(newRow.length < this.size)newRow.push(0);\n                    for(var col1 = 0; col1 < this.size; col1++)if (this.board[row][col1] !== newRow[col1]) {\n                        this.board[row][col1] = newRow[col1];\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateBoard();\n                }\n                return this.score;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var moved = false;\n                for(var col = 0; col < this.size; col++){\n                    var column = [];\n                    for(var row = this.size - 1; row >= 0; row--){\n                        var value = this.board[col][row];\n                        if (value !== 0) column.push(value);\n                    }\n                    for(var i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                        column[i] *= 2;\n                        this.score += column[i];\n                        column.splice(i + 1, 1);\n                    }\n                    while(column.length < this.size)column.push(0);\n                    for(var row1 = this.size - 1; row1 >= 0; row1--){\n                        var newValue = column[this.size - 1 - row1];\n                        if (this.board[col][row1] !== newValue) {\n                            this.board[col][row1] = newValue;\n                            moved = true;\n                        }\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateBoard();\n                }\n                return this.score;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var moved = false;\n                for(var col = 0; col < this.size; col++){\n                    var column = [];\n                    for(var row = 0; row < this.size; row++){\n                        var value = this.board[row][col];\n                        if (value !== 0) column.push(value);\n                    }\n                    for(var i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                        column[i] *= 2;\n                        this.score += column[i];\n                        column.splice(i + 1, 1);\n                    }\n                    while(column.length < this.size)column.push(0);\n                    for(var row1 = 0; row1 < this.size; row1++)if (this.board[row1][col] !== column[row1]) {\n                        this.board[row1][col] = column[row1];\n                        moved = true;\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateBoard();\n                }\n                return this.score;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var moved = false;\n                for(var col = 0; col < this.size; col++){\n                    var column = [];\n                    for(var row = this.size - 1; row >= 0; row--){\n                        var value = this.board[row][col];\n                        if (value !== 0) column.push(value);\n                    }\n                    for(var i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                        column[i] *= 2;\n                        this.score += column[i];\n                        column.splice(i + 1, 1);\n                    }\n                    while(column.length < this.size)column.push(0);\n                    for(var row1 = this.size - 1; row1 >= 0; row1--){\n                        var newValue = column[this.size - 1 - row1];\n                        if (this.board[row1][col] !== newValue) {\n                            this.board[row1][col] = newValue;\n                            moved = true;\n                        }\n                    }\n                }\n                if (moved) {\n                    this.addRandomTile();\n                    this.updateBoard();\n                }\n                return this.score;\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                if (this.status !== \"idle\") return;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n                this.updateBoard();\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < this.size; i++){\n                    for(var j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length === 0) return;\n                var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), x = _emptyCells_Math_floor[0], y = _emptyCells_Math_floor[1];\n                this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.board = Array.from({\n                    length: 4\n                }, function() {\n                    return Array(4).fill(0);\n                });\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n                this.updateBoard();\n            }\n        },\n        {\n            key: \"isGameOver\",\n            value: function isGameOver() {\n                for(var row = 0; row < this.size; row++)for(var col = 0; col < this.size; col++){\n                    if (this.board[row][col] === 0) return false;\n                    var current = this.board[row][col];\n                    if (row < this.size - 1 && this.board[row + 1][col] === current) return false;\n                    if (col < this.size - 1 && this.board[row][col + 1] === current) return false;\n                }\n                return true;\n            }\n        }\n    ]);\n    return Game;\n}();\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = $3d28d7f1aac198f5$var$Game;\n\n\n\"use strict\";\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)();\nvar $197cd56b15c33885$var$scoreElement = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startBtn = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$messegeInfo = document.querySelector(\".message\");\nfunction $197cd56b15c33885$var$updateBoard() {\n    var cells = document.querySelectorAll(\".field-cell\");\n    var board = $197cd56b15c33885$var$game.getState();\n    var has2048 = false;\n    cells.forEach(function(cell, index) {\n        var row = Math.floor(index / 4);\n        var col = index % 4;\n        var value = board[row][col];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell field-cell--\".concat(value);\n        if (value === 2048) has2048 = true;\n    });\n    if (has2048) {\n        $197cd56b15c33885$var$messegeInfo.classList.remove(\"message-start\");\n        $197cd56b15c33885$var$messegeInfo.textContent = \"Winner! Congrats! You did it!\";\n        $197cd56b15c33885$var$messegeInfo.className = \"message message-win\";\n    }\n}\n$197cd56b15c33885$var$startBtn.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startBtn.textContent = \"restart\";\n        $197cd56b15c33885$var$startBtn.classList.add(\"restart\");\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$scoreElement.textContent = \"0\";\n    }\n    $197cd56b15c33885$var$updateBoard();\n    $197cd56b15c33885$var$messegeInfo.textContent = \"\";\n    $197cd56b15c33885$var$messegeInfo.className = \"message hidden\";\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    var newScore = 0;\n    switch(e.key){\n        case \"ArrowUp\":\n            newScore = $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            newScore = $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            newScore = $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            newScore = $197cd56b15c33885$var$game.moveRight();\n            break;\n        default:\n            return;\n    }\n    $197cd56b15c33885$var$scoreElement.textContent = newScore;\n    $197cd56b15c33885$var$updateBoard();\n    if ($197cd56b15c33885$var$game.isGameOver()) {\n        $197cd56b15c33885$var$messegeInfo.textContent = \"You lose! Restart the game?\";\n        $197cd56b15c33885$var$messegeInfo.className = \"message message-lose\";\n        $197cd56b15c33885$var$game.status = \"lost\";\n    }\n});\n\n})();\n//# sourceMappingURL=index.b60ac7bb.js.map\n","'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nconst scoreElement = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.button.start');\nconst messegeInfo = document.querySelector('.message');\n\nfunction updateBoard() {\n  const cells = document.querySelectorAll('.field-cell');\n  const board = game.getState();\n\n  let has2048 = false;\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = `field-cell field-cell--${value}`;\n\n    if (value === 2048) {\n      has2048 = true;\n    }\n  });\n\n  if (has2048) {\n    messegeInfo.classList.remove('message-start');\n    messegeInfo.textContent = 'Winner! Congrats! You did it!';\n    messegeInfo.className = 'message message-win';\n  }\n}\n\nstartBtn.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    startBtn.textContent = 'restart';\n    startBtn.classList.add('restart');\n  } else {\n    game.restart();\n    scoreElement.textContent = '0';\n  }\n\n  updateBoard();\n\n  messegeInfo.textContent = '';\n  messegeInfo.className = 'message hidden';\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let newScore = 0;\n\n  switch (e.key) {\n    case 'ArrowUp':\n      newScore = game.moveUp();\n      break;\n    case 'ArrowDown':\n      newScore = game.moveDown();\n      break;\n    case 'ArrowLeft':\n      newScore = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      newScore = game.moveRight();\n      break;\n    default:\n      return;\n  }\n  scoreElement.textContent = newScore;\n  updateBoard();\n\n  if (game.isGameOver()) {\n    messegeInfo.textContent = 'You lose! Restart the game?';\n    messegeInfo.className = 'message message-lose';\n    game.status = 'lost';\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n\n    this.board =\n      initialState || Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  updateBoard() {\n    const table = document.getElementById('game-board').querySelector('tbody');\n\n    table.innerHTML = '';\n\n    for (let row = 0; row < this.size; row++) {\n      const tr = document.createElement('tr');\n\n      for (let col = 0; col < this.size; col++) {\n        const value = this.board[row][col];\n        const td = document.createElement('td');\n\n        td.classList.add('field-cell');\n\n        if (value) {\n          td.classList.add(`field-cell--${value}`);\n          td.textContent = value;\n        } else {\n          td.textContent = '';\n        }\n\n        tr.appendChild(td);\n      }\n      table.appendChild(tr);\n    }\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const newRow = [];\n\n      for (let col = 0; col < this.size; col++) {\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          newRow.push(value);\n        }\n      }\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n\n      while (newRow.length < this.size) {\n        newRow.push(0);\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] !== newRow[col]) {\n          this.board[row][col] = newRow[col];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const value = this.board[col][row];\n\n        if (value !== 0) {\n          column.push(value);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column.splice(i + 1, 1);\n        }\n      }\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const newValue = column[this.size - 1 - row];\n\n        if (this.board[col][row] !== newValue) {\n          this.board[col][row] = newValue;\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.size; row++) {\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          column.push(value);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column.splice(i + 1, 1);\n        }\n      }\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== column[row]) {\n          this.board[row][col] = column[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          column.push(value);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column.splice(i + 1, 1);\n        }\n      }\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const newValue = column[this.size - 1 - row];\n\n        if (this.board[row][col] !== newValue) {\n          this.board[row][col] = newValue;\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status !== 'idle') {\n      return;\n    }\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateBoard();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  restart() {\n    this.board = Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateBoard();\n  }\n\n  isGameOver() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        const current = this.board[row][col];\n\n        if (row < this.size - 1 && this.board[row + 1][col] === current) {\n          return false;\n        }\n\n        if (col < this.size - 1 && this.board[row][col + 1] === current) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nexport default Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","size","score","status","board","from","fill","key","value","table","document","getElementById","querySelector","innerHTML","row","tr","createElement","col","td","classList","add","concat","textContent","appendChild","moved","newRow","push","splice","col1","addRandomTile","updateBoard","column","row1","newValue","emptyCells","j","_emptyCells_Math_floor","isArray","Math","floor","random","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","o","minLen","n","Object","prototype","toString","slice","constructor","name","test","x","y","current","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$scoreElement","$197cd56b15c33885$var$startBtn","$197cd56b15c33885$var$messegeInfo","$197cd56b15c33885$var$updateBoard","cells","querySelectorAll","getState","has2048","forEach","cell","index","className","remove","addEventListener","getStatus","start","restart","e","newScore","moveUp","moveDown","moveLeft","moveRight","isGameOver"],"version":3,"file":"index.b60ac7bb.js.map"}