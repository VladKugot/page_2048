{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\";\n        this.board = initialState || Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    updateBoard() {\n        const table = document.getElementById(\"game-board\").querySelector(\"tbody\");\n        table.innerHTML = \"\";\n        for(let row = 0; row < this.size; row++){\n            const tr = document.createElement(\"tr\");\n            for(let col = 0; col < this.size; col++){\n                const value = this.board[row][col];\n                const td = document.createElement(\"td\");\n                td.classList.add(\"field-cell\");\n                if (value) {\n                    td.classList.add(`field-cell--${value}`);\n                    td.textContent = value;\n                } else td.textContent = \"\";\n                tr.appendChild(td);\n            }\n            table.appendChild(tr);\n        }\n    }\n    moveLeft() {\n        let moved = false;\n        for(let row = 0; row < this.size; row++){\n            const newRow = [];\n            for(let col = 0; col < this.size; col++){\n                const value = this.board[row][col];\n                if (value !== 0) newRow.push(value);\n            }\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i + 1, 1);\n            }\n            while(newRow.length < this.size)newRow.push(0);\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] !== newRow[col]) {\n                this.board[row][col] = newRow[col];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateBoard();\n        }\n        return this.score;\n    }\n    moveRight() {\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const column = [];\n            for(let row = this.size - 1; row >= 0; row--){\n                const value = this.board[col][row];\n                if (value !== 0) column.push(value);\n            }\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                this.score += column[i];\n                column.splice(i + 1, 1);\n            }\n            while(column.length < this.size)column.push(0);\n            for(let row = this.size - 1; row >= 0; row--){\n                const newValue = column[this.size - 1 - row];\n                if (this.board[col][row] !== newValue) {\n                    this.board[col][row] = newValue;\n                    moved = true;\n                }\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateBoard();\n        }\n        return this.score;\n    }\n    moveUp() {\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const column = [];\n            for(let row = 0; row < this.size; row++){\n                const value = this.board[row][col];\n                if (value !== 0) column.push(value);\n            }\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                this.score += column[i];\n                column.splice(i + 1, 1);\n            }\n            while(column.length < this.size)column.push(0);\n            for(let row = 0; row < this.size; row++)if (this.board[row][col] !== column[row]) {\n                this.board[row][col] = column[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateBoard();\n        }\n        return this.score;\n    }\n    moveDown() {\n        let moved = false;\n        for(let col = 0; col < this.size; col++){\n            const column = [];\n            for(let row = this.size - 1; row >= 0; row--){\n                const value = this.board[row][col];\n                if (value !== 0) column.push(value);\n            }\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                this.score += column[i];\n                column.splice(i + 1, 1);\n            }\n            while(column.length < this.size)column.push(0);\n            for(let row = this.size - 1; row >= 0; row--){\n                const newValue = column[this.size - 1 - row];\n                if (this.board[row][col] !== newValue) {\n                    this.board[row][col] = newValue;\n                    moved = true;\n                }\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.updateBoard();\n        }\n        return this.score;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        if (this.status !== \"idle\") return;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateBoard();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n    restart() {\n        this.board = Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n        this.updateBoard();\n    }\n    isGameOver() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            if (this.board[row][col] === 0) return false;\n            const current = this.board[row][col];\n            if (row < this.size - 1 && this.board[row + 1][col] === current) return false;\n            if (col < this.size - 1 && this.board[row][col + 1] === current) return false;\n        }\n        return true;\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messegeInfo = document.querySelector(\".message\");\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const cells = document.querySelectorAll(\".field-cell\");\n    const board = $09e991522ca7e64e$var$game.getState();\n    let has2048 = false;\n    cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = board[row][col];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = `field-cell field-cell--${value}`;\n        if (value === 2048) has2048 = true;\n    });\n    if (has2048) {\n        $09e991522ca7e64e$var$messegeInfo.classList.remove(\"message-start\");\n        $09e991522ca7e64e$var$messegeInfo.textContent = \"Winner! Congrats! You did it!\";\n        $09e991522ca7e64e$var$messegeInfo.className = \"message message-win\";\n    }\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startBtn.textContent = \"restart\";\n        $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$scoreElement.textContent = \"0\";\n    }\n    $09e991522ca7e64e$var$updateBoard();\n    $09e991522ca7e64e$var$messegeInfo.textContent = \"\";\n    $09e991522ca7e64e$var$messegeInfo.className = \"message hidden\";\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    let newScore = 0;\n    switch(e.key){\n        case \"ArrowUp\":\n            newScore = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            newScore = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            newScore = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            newScore = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$scoreElement.textContent = newScore;\n    $09e991522ca7e64e$var$updateBoard();\n    if ($09e991522ca7e64e$var$game.isGameOver()) {\n        $09e991522ca7e64e$var$messegeInfo.textContent = \"You lose! Restart the game?\";\n        $09e991522ca7e64e$var$messegeInfo.className = \"message message-lose\";\n        $09e991522ca7e64e$var$game.status = \"lost\";\n    }\n});\n\n\n//# sourceMappingURL=index.7e0e1fbb.js.map\n","'use strict';\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\nconst scoreElement = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.button.start');\nconst messegeInfo = document.querySelector('.message');\n\nfunction updateBoard() {\n  const cells = document.querySelectorAll('.field-cell');\n  const board = game.getState();\n\n  let has2048 = false;\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = `field-cell field-cell--${value}`;\n\n    if (value === 2048) {\n      has2048 = true;\n    }\n  });\n\n  if (has2048) {\n    messegeInfo.classList.remove('message-start');\n    messegeInfo.textContent = 'Winner! Congrats! You did it!';\n    messegeInfo.className = 'message message-win';\n  }\n}\n\nstartBtn.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n    startBtn.textContent = 'restart';\n    startBtn.classList.add('restart');\n  } else {\n    game.restart();\n    scoreElement.textContent = '0';\n  }\n\n  updateBoard();\n\n  messegeInfo.textContent = '';\n  messegeInfo.className = 'message hidden';\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let newScore = 0;\n\n  switch (e.key) {\n    case 'ArrowUp':\n      newScore = game.moveUp();\n      break;\n    case 'ArrowDown':\n      newScore = game.moveDown();\n      break;\n    case 'ArrowLeft':\n      newScore = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      newScore = game.moveRight();\n      break;\n    default:\n      return;\n  }\n  scoreElement.textContent = newScore;\n  updateBoard();\n\n  if (game.isGameOver()) {\n    messegeInfo.textContent = 'You lose! Restart the game?';\n    messegeInfo.className = 'message message-lose';\n    game.status = 'lost';\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle';\n\n    this.board =\n      initialState || Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  updateBoard() {\n    const table = document.getElementById('game-board').querySelector('tbody');\n\n    table.innerHTML = '';\n\n    for (let row = 0; row < this.size; row++) {\n      const tr = document.createElement('tr');\n\n      for (let col = 0; col < this.size; col++) {\n        const value = this.board[row][col];\n        const td = document.createElement('td');\n\n        td.classList.add('field-cell');\n\n        if (value) {\n          td.classList.add(`field-cell--${value}`);\n          td.textContent = value;\n        } else {\n          td.textContent = '';\n        }\n\n        tr.appendChild(td);\n      }\n      table.appendChild(tr);\n    }\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.size; row++) {\n      const newRow = [];\n\n      for (let col = 0; col < this.size; col++) {\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          newRow.push(value);\n        }\n      }\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1);\n        }\n      }\n\n      while (newRow.length < this.size) {\n        newRow.push(0);\n      }\n\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] !== newRow[col]) {\n          this.board[row][col] = newRow[col];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  moveRight() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const value = this.board[col][row];\n\n        if (value !== 0) {\n          column.push(value);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column.splice(i + 1, 1);\n        }\n      }\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const newValue = column[this.size - 1 - row];\n\n        if (this.board[col][row] !== newValue) {\n          this.board[col][row] = newValue;\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = 0; row < this.size; row++) {\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          column.push(value);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column.splice(i + 1, 1);\n        }\n      }\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < this.size; row++) {\n        if (this.board[row][col] !== column[row]) {\n          this.board[row][col] = column[row];\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < this.size; col++) {\n      const column = [];\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const value = this.board[row][col];\n\n        if (value !== 0) {\n          column.push(value);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          this.score += column[i];\n          column.splice(i + 1, 1);\n        }\n      }\n\n      while (column.length < this.size) {\n        column.push(0);\n      }\n\n      for (let row = this.size - 1; row >= 0; row--) {\n        const newValue = column[this.size - 1 - row];\n\n        if (this.board[row][col] !== newValue) {\n          this.board[row][col] = newValue;\n          moved = true;\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.updateBoard();\n    }\n\n    return this.score;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    if (this.status !== 'idle') {\n      return;\n    }\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateBoard();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [x, y] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  restart() {\n    this.board = Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n    this.updateBoard();\n  }\n\n  isGameOver() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        const current = this.board[row][col];\n\n        if (row < this.size - 1 && this.board[row + 1][col] === current) {\n          return false;\n        }\n\n        if (col < this.size - 1 && this.board[row][col + 1] === current) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","Array","from","length","fill","updateBoard","table","document","getElementById","querySelector","innerHTML","row","tr","createElement","col","value","td","classList","add","textContent","appendChild","moveLeft","moved","newRow","push","i","splice","addRandomTile","moveRight","column","newValue","moveUp","moveDown","getScore","getState","getStatus","start","emptyCells","j","x","y","Math","floor","random","restart","isGameOver","current","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$messegeInfo","$09e991522ca7e64e$var$updateBoard","cells","querySelectorAll","has2048","forEach","cell","index","className","remove","addEventListener","e","newScore","key"],"version":3,"file":"index.7e0e1fbb.js.map"}